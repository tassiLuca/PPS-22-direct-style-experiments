[{"id":0,"href":"/PPS-22-direct-style-experiments/docs/01-boundaries/","title":"01 Boundaries","section":"Docs","content":" boundary / break # Source code\nProvides a cleaner alternative to non-local returns; boundary: is short for boundary.apply: with the indented code below it passed as the body block is a context function that is called within boundary.apply to return the block of code shown in the example\nUsers don’t define Label instances themselves. Instead, this is done inside the implementation of boundary.apply to provide the capability of doing a non-local return.\n/** Run `body` with freshly generated label as implicit argument. Catch any * breaks associated with that label and return their results instead of * `body`\u0026#39;s result. */ inline def apply[T](inline body: Label[T] ?=\u0026gt; T): T = val local = Label[T]() try body(using local) catch case ex: Break[T] @unchecked =\u0026gt; if ex.label eq local then ex.value else throw ex we don’t want users to call break without an enclosing boundary. That’s why break requires an in-scope given instance of Label, which the implementation of boundary.apply creates before it calls the code block you provide. If your code block calls break, a given Label will be in-scope. non-localbreaks are logically implemented as non-fatal exceptions and the implementation is optimized to suppress unnecessary stack trace generation. Stack traces are unnecessary because we are handling these exceptions, not barfing them on the user! optimizations: Better performance is provided when a break occurs to the enclosing scope inside the same method (i.e., the same stack frame), where it can be rewritten to a jump call. What can we do with boundary and break mechanism? # Optional # object optional: inline def apply[T](inline body: Label[None.type] ?=\u0026gt; T): Option[T] = boundary(Some(body)) extension [T](o: Option[T]) inline def ?(using label: Label[None.type]): T = o.getOrElse(break(None)) Rust-like Result + ? # object result: sealed trait Result[+T] case class Ok[+T](t: T) extends Result[T] case class Error(e: String) extends Result[Nothing] inline def apply[T](inline body: Label[Error] ?=\u0026gt; T): Result[T] = boundary(Ok(body)) extension [T](r: Result[T]) inline def ?(using Label[Error]): T = r match case Ok(t) =\u0026gt; t case e @ Error(_) =\u0026gt; break(e) Either + ? # object either: inline def apply[L, R](inline body: Label[Left[L, Nothing]] ?=\u0026gt; R): Either[L, R] = boundary(Right(body)) extension [L, R](e: Either[L, R]) inline def ?(using Label[Left[L, Nothing]]): R = e match case Right(value) =\u0026gt; value case Left(value) =\u0026gt; break(Left(value)) "},{"id":1,"href":"/PPS-22-direct-style-experiments/docs/02-blog-posts-ws/","title":"02 Blog Posts Ws","section":"Docs","content":" Blog posts service example: a direct-style vs monadic comparison # The need for a new Future construct # The current implementation of the Future monadic construct suffers the following main cons:\nLack of referential transparency; Lack of cancellation mechanisms and structured concurrency; Accidental Sequentiality. To show these weaknesses in practice, a simple example of the core of a web service implementation is presented.\nExample: a blog posts service # Idea: develop a very simple (mocked) service which allows to retrieve and store from a repository blog posts, performing checks on the content and author before the actual storage. The example has been implemented using:\nthe continuation style through the current Scala Future monadic constructs; the direct style, through: the abstractions offered by gears; Kotlin coroutines. The example (and every subsequent one) is organized in three gradle submodules:\nblog-ws-commons contains code which has been reused for both the monadic and direct versions; a submodule blog-ws-monadic with the monadic Scala style and blog-ws-direct for the direct versions, both in Kotlin with coroutines and in Scala with gears. Structure # The domain is modelled using abstract data types in a common PostsModel trait:\ntrait PostsModel: type AuthorId type Title type Body type PostContent = (Title, Body) /** A blog post, comprising of an author, title, body and the information about last modification. */ case class Post(author: Author, title: Title, body: Body, lastModification: Date) /** A post author and their info. */ case class Author(authorId: AuthorId, name: String, surname: String) /** A function that verifies the content of the post, * returning [[Right]] with the content of the post if the * verification succeeds or [[Left]] with the reason why failed. */ type ContentVerifier = (Title, Body) =\u0026gt; Either[String, PostContent] type AuthorsVerifier = AuthorId =\u0026gt; Author To implement the service two components have been conceived, following the Cake Pattern:\nPostsRepositoryComponent exposes the Repository trait allowing to store and retrieve blog posts; mocks a DB technology with an in-memory collection. PostsServiceComponent is the component exposing the Service interface. is the component that would be called by the controller of the ReSTful web service. Both must be designed in an async way.\nCurrent monadic Future # The interface of the repository and services component of the monadic version are presented hereafter and their complete implementation is available here.\n/** The component exposing blog posts repositories. */ trait PostsRepositoryComponent: context: PostsModel =\u0026gt; /** The repository instance. */ val repository: PostsRepository /** The repository in charge of storing and retrieving blog posts. */ trait PostsRepository: /** Save the given [[post]]. */ def save(post: Post)(using ExecutionContext): Future[Post] /** Return a future completed with true if a post exists with the given title, false otherwise. */ def exists(postTitle: Title)(using ExecutionContext): Future[Boolean] /** Load all the saved post. */ def load(postTitle: Title)(using ExecutionContext): Future[Option[Post]] /** Load the post with the given [[postTitle]]. */ def loadAll()(using ExecutionContext): Future[LazyList[Post]] /** The component blog posts service. */ trait PostsServiceComponent: context: PostsRepositoryComponent with PostsModel =\u0026gt; /** The blog post service instance. */ val service: PostsService /** The service exposing a set of functionalities to interact with blog posts. */ trait PostsService: /** Creates a new blog post with the given [[title]] and [[body]], authored by [[authorId]]. */ def create(authorId: AuthorId, title: Title, body: Body)(using ExecutionContext): Future[Post] /** Get a post from its [[title]]. */ def get(title: Title)(using ExecutionContext): Future[Post] /** Gets all the stored blog posts in a lazy manner. */ def all()(using ExecutionContext): Future[LazyList[Post]] All the exposed functions, since they are asynchronous, returns an instance of Future[T] and requires to be called in a scope where a given instance of the ExecutionContext is declared.\nWhat\u0026rsquo;s important to delve into is the implementation of the service, and, more precisely, of the create method. As already mentioned, before saving the post two checks needs to be performed:\nthe post author must have permissions to publish a post and their information needs to be retrieved (supposing they are managed by another microservice); the content of the post is analyzed in order to prevent the storage and publication of offensive or non-appropriate contents. Since these operations are independent from each other they can be spawned and run in parallel.\noverride def create(authorId: AuthorId, title: Title, body: Body)(using ExecutionContext): Future[Post] = for exists \u0026lt;- context.repository.exists(title) if !exists post \u0026lt;- save(authorId, title, body) yield post private def save(authorId: AuthorId, title: Title, body: Body)(using ExecutionContext): Future[Post] = val authorAsync = authorBy(authorId) val contentAsync = verifyContent(title, body) for content \u0026lt;- contentAsync author \u0026lt;- authorAsync post = Post(author, content._1, content._2, Date()) _ \u0026lt;- context.repository.save(post) yield post This implementation shows the limits of the current monadic Future mechanism:\nif we want to achieve the serialization of future\u0026rsquo;s execution we need to compose them using the flatMap, like in the create function: first the check on the post existence is performed, and only if it successful and another post with same title doesn\u0026rsquo;t exists the save function is started\nas a consequence, if we want two futures to run in parallel we have to spawn them before the for-yield, as in the save function, or use Future\u0026rsquo;s Applicative, like mapN provided by Cats. This is error prone and could lead to unexpected sequentiality for non experted Scala programmers, like this:\nfor content \u0026lt;- verifyContent(title, body) author \u0026lt;- authorBy(authorId) post = Post(author, content._1, content._2, Date()) _ \u0026lt;- context.repository.save(post) yield post since the publication of a post can be performed only if both of these checks succeeds, it is desirable that, whenever one of the two fails, the other get cancelled. Unfortunately, currently, Scala Futures are not cancellable and provides no structured concurrency mechanism.\nmoreover, they lack referential transparency, i.e. future starts running when they are defined. This mean that passing a reference to a future is not the same as passing the referenced expression.\nDirect style: Scala version with gears # The API of the gears library is presented hereafter and is built on top of four main abstractions, three of them are here presented (the fourth in next example):\nAsync context is \u0026ldquo;a capability that allows a computation to suspend while waiting for the result of an async source\u0026rdquo;. Code that has access to an instance of the Async trait is said to be in an async context and it is able to suspend its execution. Usually it is provided via given instances. A common way to obtain an Async instance is to use an Async.blocking. Async.Source modeling an asynchronous source of data that can be polled or awaited by suspending the computation, as well as composed using combinator functions. Futures are the primary (in fact, the only) active elements that encapsulate a control flow that, eventually, will deliver a result (either a computed or a failure value that contains an exception). Since Futures are Async.Sources they can be awaited and combined with other Futures, suspending their execution. Tasks are the abstraction created to create delayed Futures, responding to the lack of referential transparency problem. They takes the body of a Future as an argument; its run method converts that body to a Future, starting its execution. Promises allows to define Future\u0026rsquo;s result value externally, instead of executing a specific body of code. classDiagram class Async { \u0026#60;\u0026#60;trait\u0026#62;\u0026#62; +group: CompletionGroup +withGroup(group: CompletionGroup) Async +await[T](src: Async.Source[T]) T +current() Async$ +blocking[T](body: Async ?=\u003e T) T$ +group[T](body: Async ?=\u003e T) T$ } class `Async.Source[+T]` { \u0026#60;\u0026#60;trait\u0026#62;\u0026#62; +poll(k: Listener[T]) Boolean +poll() Option[T] +onComplete(k: Listener[T]) +dropListener(k: Listener[T]) +awaitResult() T } Async *--\u003e `Async.Source[+T]` class OriginalSource { \u0026#60;\u0026#60;abstract class\u0026#62;\u0026#62; } `Async.Source[+T]` \u003c|-- OriginalSource class `Listener[-T]` { \u0026#60;\u0026#60;trait\u0026#62;\u0026#62; +lock: Listener.ListenerLock | Null +complete(data: T, source: Async.Source[T]) +completeNow(data: T, source: Async.Source[T]) Boolean +apply[T](consumer: (T, Source[T]) =\u003e Unit) Listener[T]$ } `Async.Source[+T]` *--\u003e `Listener[-T]` class `Future[+T]` { \u0026#60;\u0026#60;trait\u0026#62;\u0026#62; +apply[T](body: Async ?=\u003e T) Future[T]$ +now[T](result: Try[T]) Future[T] +zip[U](f2: Future[U]) Future[T, U] +alt(f2: Future[T]) Future[T] +altWithCancel(f2: Future[T]) Future[T] } class `Promise[+T]` { \u0026#60;\u0026#60;trait\u0026#62;\u0026#62; +asFuture Future[T] +complete(result: Try[T]) } OriginalSource \u003c|-- `Future[+T]` `Future[+T]` \u003c|-- `Promise[+T]` class `Task[+T]` { +apply(body: (Async, AsyncOperations) ?=\u003e T) Task[T]$ +run: Future[+T] } `Future[+T]` \u003c--* `Task[+T]` class Cancellable { \u0026#60;\u0026#60;trait\u0026#62;\u0026#62; +group: CompletionGroup +cancel() +link(group: CompletionGroup) +unlink() } Cancellable \u003c|-- `Future[+T]` class Tracking { \u0026#60;\u0026#60;trait\u0026#62;\u0026#62; +isCancelled Boolean } Cancellable \u003c|-- Tracking class CompletionGroup { +add(member: Cancellable) +drop(member: Cancellable) } Tracking \u003c|-- CompletionGroup Async *--\u003e CompletionGroup Going back to our example, the interface of both the repository and service components becomes:\n/** The component exposing blog posts repositories. */ trait PostsRepositoryComponent: context: PostsModel =\u0026gt; /** The repository instance. */ val repository: PostsRepository /** The repository in charge of storing and retrieving blog posts. */ trait PostsRepository: /** Save the given [[post]]. */ def save(post: Post)(using Async): Post /** Return true if a post exists with the given title, false otherwise. */ def exists(postTitle: Title)(using Async): Boolean /** Load the post with the given [[postTitle]]. */ def load(postTitle: Title)(using Async): Option[Post] /** Load all the saved post. */ def loadAll()(using Async): LazyList[Post] /** The blog posts service component. */ trait PostsServiceComponent: context: PostsRepositoryComponent with PostsModel =\u0026gt; /** The blog post service instance. */ val service: PostsService /** The service exposing a set of functionalities to interact with blog posts. */ trait PostsService: /** Creates a new blog post with the given [[title]] and [[body]], authored by [[authorId]], or a string explaining * the reason of the failure. */ def create(authorId: AuthorId, title: Title, body: Body)(using Async): Either[String, Post] /** Get a post from its [[title]] or a string explaining the reason of the failure. */ def get(title: Title)(using Async): Either[String, Post] /** Gets all the stored blog posts in a lazy manner or a string explaining the reason of the failure. */ def all()(using Async): Either[String, LazyList[Post]] As you can see, Futures are gone and the return type it\u0026rsquo;s just the result of their intent (expressed with Either to return a meaningful message in case of failure). The fact they are suspendable is expressed by means of the Async context, which is required to invoke those function.\nKey inspiring principle (actually, \u0026ldquo;stolen\u0026rdquo; by Kotlin)\n❝Concurrency is hard! Concurrency has to be explicit!❞\nBy default the code is serial. If you want to opt-in concurrency you have to explicitly use a Future or Task spawning a new control flow that executes asynchronously, allowing the caller to continue its execution.\nThe other important key feature of the library is the support to structured concurrency and cancellation mechanisms:\nFutures are Cancellable instances;\nWhen you cancel a future using the cancel() method, it promptly sets its value to Failure(CancellationException). Additionally, if it\u0026rsquo;s a runnable future, the thread associated with it is interrupted using Thread.interrupt().\nto avoid the immediate cancellation, deferring the cancellation after some block is possible using uninterruptible function:\nval f = Future { // this can be interrupted uninterruptible { // this cannot be interrupted *immediately* } // this can be interrupted } Futures are nestable; it is assured that the lifetime of nested computations is contained within the lifetime of enclosing ones. This is achieved using CompletionGroups, which are cancellable objects themselves and serves as containers for other cancellable objects, that once cancelled, all of its members are cancelled as well.\nA cancellable object can be included inside the cancellation group of the async context using the link method; this is what the implementation of the Future does, under the hood. The implementation of the create function with direct style in gears looks like this:\noverride def create(authorId: AuthorId, title: Title, body: Body)(using Async): Either[String, Post] = if context.repository.exists(title) then Left(s\u0026#34;A post entitled $title already exists\u0026#34;) else either: val f = Future: val content = verifyContent(title, body).run // spawning a new Future val author = authorBy(authorId).run // spawninig a new Future content.zip(author).await val (post, author) = f.awaitResult.? context.repository.save(Post(author, post.?._1, post.?._2, Date())) /* Pretending to make a call to the Authorship Service that keeps track of authorized authors. */ private def authorBy(id: AuthorId): Task[Author] = ??? /* Some local computation that verifies the content of the post is appropriate (e.g. not offensive, ...). */ private def verifyContent(title: Title, body: Body): Task[Either[String, PostContent]] = ??? Some remarks:\nthe either boundary have been used to quickly return a Right[String, Post] object in case something goes wrong; authorBy and verifyContent returns referential transparent Task instances. Running them, spawns a new Future instance; Thanks to structured concurrency and zip combinator we can obtain that if one of the nested two futures fails the enclosing future is cancelled, cancelling also all its unterminated children zip: combinator function returning a pair with the results if both Futures succeed, otherwise fail with the failure that was returned first. Be aware of the fact to achieve cancellation is necessary to enclose both the content verification and authorization task inside an enclosing Future, since the zip doesn\u0026rsquo;t provide cancellation mechanism per se. The following code wouldn\u0026rsquo;t work as expected! val contentVerifier = verifyContent(title, body).run val authorizer = authorBy(authorId).run val (post, author) = contentVerifier.zip(authorizer).awaitResult.? Other combinator methods, available on Futures instance:\nCombinator Goal Future[T].zip(Future[U]) Parallel composition of two futures. If both futures succeed, succeed with their values in a pair. Otherwise, fail with the failure that was returned first Future[T].alt(Future[T]) / Seq[Future[T]].altAll Alternative parallel composition. If either task succeeds, succeed with the success that was returned first. Otherwise, fail with the failure that was returned last (race all futures). Future[T].altWithCancel(Future[T]) / Seq[Future[T]].altAllWithCancel Like alt but the slower future is cancelled. Seq[Future[T]].awaitAll .await for all futures in the sequence, returns the results in a sequence, or throws if any futures fail. Seq[Future[T]].awaitAllOrCancel Like awaitAll, but cancels all futures as soon as one of them fails. TO FINISH\nkotlin coroutines\nw.r.t. kotlin coroutines:\n\u0026ldquo;Finally, about function coloring: Capabilities are actually much better here than other language\u0026rsquo;s proposals such as suspend or async which feel clunky in comparison. This becomes obvious when you consider higher order functions. Capabilities let us define a single map (with no change in signature compared to now!) that works for sync as well as async function arguments. That\u0026rsquo;s the real breakthrough here, which will make everything work so much smoother. I have talked about this elsewhere and this response is already very long, so I will leave it at that.\u0026rdquo; how suspension is implemented\n"},{"id":2,"href":"/PPS-22-direct-style-experiments/docs/03-channels/","title":"03 Channels","section":"Docs","content":" Channels as a communication primitive # Both in Kotlin and Scala channels are the primitive communication mean to exchnage Futures results.\nChannels in gears\ndesign: ephimeral Async sources work stealing behavior fairness (?) closable at closing the reader cannot anymore read values (differ from kotlin) three types: Buffered, Unbounded, Sync Channels in Kotlin (w.r.t. gears)\npipeline (not supported in Gears) closable Organization analyzer example # "},{"id":3,"href":"/PPS-22-direct-style-experiments/docs/04-rears/","title":"04 Rears","section":"Docs","content":" Bring reactivity principles in gears: Rears # Gears:\nTask scheduling Pro and cons proactiveness Producer + Consumer design Manipulation of channels with functions inspired by Rx Kotlin:\nflows Example: IOT use case # "},{"id":4,"href":"/PPS-22-direct-style-experiments/docs/05-going-further/","title":"05 Going Further","section":"Docs","content":" Going further # "}]