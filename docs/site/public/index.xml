<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PPS-22-direct-style-experiments</title>
    <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/</link>
    <description>Recent content on PPS-22-direct-style-experiments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://tassiluca.github.io/PPS-22-direct-style-experiments/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/01-boundaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/01-boundaries/</guid>
      <description>boundary / break # Source code&#xA;Provides a cleaner alternative to non-local returns; boundary: is short for boundary.apply: with the indented code below it passed as the body block is a context function that is called within boundary.apply to return the block of code shown in the example&#xA;Users donâ€™t define Label instances themselves. Instead, this is done inside the implementation of boundary.apply to provide the capability of doing a non-local return.</description>
    </item>
    <item>
      <title></title>
      <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/02-blog-posts-ws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/02-blog-posts-ws/</guid>
      <description>Blog posts service example: a direct-style vs monadic comparison # The need for a new Future construct # The current implementation of the Future monadic construct suffers the following main cons:&#xA;Lack of referential transparency; Lack of cancellation mechanisms and structured concurrency; Accidental Sequentiality. To show these weaknesses in practice, a simple example of the core of a web service implementation is presented.&#xA;Example: a blog posts service # Idea: develop a very simple (mocked) service which allows to retrieve and store from a repository blog posts, performing checks on the content and author before the actual storage.</description>
    </item>
    <item>
      <title></title>
      <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/03-channels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/03-channels/</guid>
      <description>Channels as a communication primitive # The fourth, yet not mentioned, abstraction of both Kotlin Coroutines and Scala Gears is the channel. Channels represent the primitive communication and coordination means to exchange Future results. They are, at least conceptually, very similar to a queue where it is possible to send (and receive) data &amp;ndash; basically, exploiting the producer-consumer pattern.&#xA;classDiagram class `SendableChannel[-T]` { &lt;&lt; trait &gt;&gt; +sendSource(x: T) Async.Source[Either[Closed, Unit]] +send(x: T)(using Async) Unit } class `ReadableChannel[+T]` { &lt;&lt; trait &gt;&gt; +readSource Async.</description>
    </item>
    <item>
      <title></title>
      <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/04-rears/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/04-rears/</guid>
      <description> Bring reactivity principles in gears: Rears # Gears:&#xA;Task scheduling Pro and cons proactiveness Producer + Consumer design Manipulation of channels with functions inspired by Rx Kotlin:&#xA;flows Example: IOT use case # </description>
    </item>
    <item>
      <title></title>
      <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/05-going-further/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/05-going-further/</guid>
      <description> Going further # </description>
    </item>
  </channel>
</rss>
