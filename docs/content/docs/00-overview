# ...

## Context

In the realm of asynchronous programming, the Scala ecosystem offers a set of solid monads constructs and libraries to tackle complex task functionally with elegance and efficiency, like Monix Tasks and Cats Effect.

However, we are assisting to the increase in adoption of continuation and coroutines in modern runtimes, either exploiting some kind of fibers support, like the project Loom with Virtual Threads, or via code generation, like Kotlin Coroutines.

## Goals

The goal of this project is to delve into this field through the lens of direct style, developing few examples (not too complex) leveraging the new strawman library Scala Gears, comparing it with Kotlin's Coroutines and the current implementation of monadic Futures, seeking to analyze aspects such as:

- ergonomics of the two styles (which one results more thoughtful and/or verbose);
- which of the two approaches has a real advantage in adoption;
- pros and cons of the two styles;
- any limitations and difficulties encountered in using them.

## The contribution

The project is built around three main examples, focusing on different aspects. 
The first is bout 






## References

## Conclusions

